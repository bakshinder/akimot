#Default configuration file
#comments also give hints on expected type of the option 
# [a, b] means closed interval a, b 
# {a, b, c} means one of values a, b, c - typically used for boolean switches {0, 1}
# (int) means natural number 
# (int+) means positive natural number 
# (real) means real number 
# (real+) means positive real number 

[playouts]

#length of playout before evaluation (int+)
#random number from interval [1, playout_len] is selected for playout length
playout_len = 4

#use exact result of the playout evaluation {0, 1}
#if disabled evaluation result is probabilistically mapped to {0, 1}
exact_playout_value = 1

#knowledge bias in playout {0, 1}
knowledge_in_playout = 1

#knowledge_tournament_size steps are selected in playout, 
#evaluated and best one is performed (int+)
knowledge_tournament_size = 3

#optimized playouts switcher {0, 1} 
# 1 - optimized playouts (by moves)
# 0 - simple playouts (by steps)
playout_by_moves = 1

[evaluation]

#locality principle in playout's step evaluation {0, 1}
local_playout = 1

#goal search extension in evaluation {0, 1}
extensions_in_eval = 1

#use best evaluation {0, 1}
# 1 - custom evaluation
# 0 - deprecated bot_sampleC evaluation
use_best_eval = 1

[UCT]

#number of uct threads [1, 64]
search_threads_num = 1

#number of virtual visits to initialize node (int+)
virtual_visits = 5

#ucb tuned formula {0, 1}
ucb_tuned = 0

#exploration rate dynamic update {0, 1}
dynamic_exploration = 0

#caching children values in uct {0, 1}
children_cache = 1

#avoid repetitions in the tree {0, 1}
uct_transposition_tables = 1

#history heuristic in node init {0, 1}
history_heuristic = 1

#relative update after playout {0, 1}
uct_relative_update = 0

#knowledge in uct tree {0, 1}
knowledge_in_tree = 1

#move advisor framework [0, 1]
move_advisor = 0.05

#active trapping mechanism [0, 1]
#searches for simple trapping patterns in playouts
active_trapping = 0.05

#coefficient guarding uct exploration [0, 1]
#(used only when ucb_tuned = 0)
explore_rate = 0.2

#number of travels before node is expanded (int+)
#actually node expansion is guarded by: mature_level + node_depth
mature_level = 5

[time]

#default time per move (in seconds) [real+]
tc_move_default = 3 

[step_knowledge_values]

#in this section type of all options is (real) if not stated otherwise

#penalty for every missing step after(including) pass
pass_penalty = -0.5

#penalty for inverse steps (result in position before last step)
inverse_step_penalty = 0

#bonus for step with elephant 
elephant_step_val = 0.1

#bonus for step with camel
camel_step_val = 0

#bonus for step with horse 
horse_step_val = 0

#bonus for any push pulls
push_pull_val = 0.1

#penalty for leaving the trap guard resulting in piece death
#might be reasonable for rabbits goal runs
leave_buddy_in_trap_penalty = -1

#penalty for commiting suicide
suicide_penalty = -5

#penalty for stepping into trap guarded by single friendly piece 
step_in_dangerous_trap_penalty = -0.5

#bonus for pushing/pulling opponent's piece to trap (no matter if it dies)
push_pull_to_trap_val = 0.2

#bonus for killing opponent's piece
kill_val = 5

#bonus for rabbit step in the beginning
rabbit_step_begin_val = -1.2

#bonus for rabbit step in the middle game
rabbit_step_middle_val = -0.2

#bonus for rabbit step in the end game
rabbit_step_late_val = 0.2

#bonus for locality to previous step
locality_val = 0.1

#reach of locality bonus (int+)
locality_reach = 3

[evaluation_values]
#in this section type of all options is (int) except from 'ratio' options which are of type [0, 1]

#absolute values of pieces: 0 rabbit cat dog horse camel elephant
piece_values =  0   100   250   300   800  1100  1800

#penalties for having 0 1 2 3 4 5 6 7 8 rabbits
rabbit_penalty = -10000  -500  -400  -200  -150   -50   -20     0     0

#ratio to be substracted from frozen piece value
frozen_penalty_ratio = -0.1

#fixed penalty for camel hostage situation
camel_hostage_penalty = -250

#fixed penalty for elephant blockade situation
#in the beginning of the game, this penalty gets multiplied 
elephant_blockade_penalty = -700

#penalty for not-empty trap where player has an active attack
active_trap_blocked_penalty = -40

#value of sole presence at trap
trap_sole_val = 50

#bonus for frozen pieces in vicinity of sole trap (potential to trap)
trap_pot_val = 100

#value of safe trap (2 pieces or locally strongest piece)
trap_safe_val = 50

#value of active attack trap (dominance + potential to trap st.)
trap_active_val = 150

#value for more than one guard of the trap
trap_more_than_one_val = 0

#ratio to be substracted from framed piece value
frame_penalty_ratio = -0.3

#ratio to be substracted from pinned piece value
pinned_penalty_ratio = -0.15

#following are position tables - values for positions on particular squares
#they get mirrored automatically in the engine (therefore right part are zeros)

elephant_position = 
     0     1     1     2     0     0     0     0
     1     2     2     3     0     0     0     0
     2     4    -4    10     0     0     0     0
     3     8    12    12     0     0     0     0
     3     8    12    10     0     0     0     0
     2     4    -4    10     0     0     0     0
     1     2     2     3     0     0     0     0
     0     1     1     2     0     0     0     0

camel_position = 
    -2    -1     0     1     0     0     0     0
    -1     0     1     2     0     0     0     0
     0     1    -5     3     0     0     0     0
     1     2     3     4     0     0     0     0
     2     3     4     5     0     0     0     0
     1     2     3     4     0     0     0     0
     0     1     2     3     0     0     0     0
    -1     0     1     2     0     0     0     0

horse_position = 
    -2    -1     0     1     0     0     0     0
    -1     0     1     2     0     0     0     0
     0     1    -5     3     0     0     0     0
     1     2     3     4     0     0     0     0
     2     3     4     5     0     0     0     0
     1     2     3     4     0     0     0     0
     0     1     2     3     0     0     0     0
    -1     0     1     2     0     0     0     0

dog_position = 
    -4    -6    -6    -6     0     0     0     0
    -7    -8   -10    -9     0     0     0     0
    -9   -10   -12   -11     0     0     0     0
    -6    -8    -9    -9     0     0     0     0
    -3    -5    -6    -6     0     0     0     0
    -1    -1    -2    -3     0     0     0     0
     1     2     4     2     0     0     0     0
     0     1     1     1     0     0     0     0

cat_position = 
    -4    -6    -6    -6     0     0     0     0
    -7    -8   -10    -9     0     0     0     0
    -9   -10   -12   -11     0     0     0     0
    -6    -8    -9    -9     0     0     0     0
    -3    -5    -6    -6     0     0     0     0
    -1    -1    -2    -3     0     0     0     0
     1     2     4     2     0     0     0     0
     0     1     1     1     0     0     0     0

rabbit_position = 
     0     0     0     0     0     0     0     0
   -14   -16    -8   -16     0     0     0     0
   -16   -10   -16   -10     0     0     0     0
    -8   -12   -12   -12     0     0     0     0
    -5    -8    -8    -8     0     0     0     0
    -3    -5    -6    -6     0     0     0     0
    -1    -2    -1    -4     0     0     0     0
     0     0     0     0     0     0     0     0

#position tables for late part of the game

rabbit_late_position = 
     0     0     0     0     0     0     0     0
    25    25    25    25     0     0     0     0
    20    20    20    20     0     0     0     0
    16    15    14    14     0     0     0     0
     8     7     6     6     0     0     0     0
     4     3     2     2     0     0     0     0
     2     1     1     1     0     0     0     0
     0     0     0     0     0     0     0     0

